{"version":3,"sources":["components/CurrentDrop/FormBody.tsx","components/CurrentDrop/TableCurrentDrop.tsx","components/CurrentDrop/index.tsx","components/DropsBase/index.tsx","components/SwitchScreen/index.tsx","components/App/index.tsx","stores/SubStore.ts","utils/firebase.ts","stores/DataStore.ts","stores/CurrentDropStore.ts","stores/SwitchScreenStore.ts","index.tsx","stores/RootStore.ts","utils/localStore.ts"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","Root","styled","div","FormBody","inject","observer","onFill","props","formRef","current","setFieldsValue","article","quantityIssued","materials","designer","price","description","picture","onSubmit","wear","currentDropStore","addWear","resetFields","ref","this","name","onFinish","values","id","currentWearId","Item","label","rules","required","type","htmlType","onClick","React","Component","TableCurrentDrop","dataSource","currentDrop","reduce","acc","index","key","columns","title","dataIndex","render","text","record","size","deleteWear","find","item","setCurrentWearId","ButtonPush","dataStore","addDrop","value","clear","CurrentDrop","createRef","handleSubmit","console","log","classHidden","switchScreenStore","openScreen","Wrapper","className","css","DropsBase","drops","data","Object","entries","map","numberOfThings","keys","length","expandable","expandedRowRender","dropInfoColumns","v","rowExpandable","dropInfo","Loader","color","height","width","SwitchScreen","handleSwitch","typeOfScreen","setScreen","classSwitch","Drops","PushDrop","App","state","visible","SubStore","rootStore","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","DataStore","initState","drop","a","Promise","resolve","push","error","syncGoods","updateItem","update","removeItem","remove","observable","action","once","then","snapshot","val","CurrentDropStore","autoUpdate","autorun","localStorage","setItem","JSON","stringify","parse","getItem","Math","ceil","random","toString","filter","findIndex","splice","SwitchScreenStore","mobXStore","serialize","undefined","loadState","dir","delay","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3d3642df.chunk.js","sourcesContent":["import React from 'react'\nimport styled from '@emotion/styled'\nimport { Form, Input, Button } from 'antd';\nimport { FormInstance } from 'antd/lib/form';\nimport { inject, observer } from 'mobx-react'\nimport { CurrentDropStore, IWearable } from '../../stores/CurrentDropStore'\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Root = styled.div`\nwidth: 100%;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n.ant-form {\n    width: 98%;\n    margin-right: 15%;\n}\n`\n\n\ninterface IProps {\n    currentDropStore?: CurrentDropStore\n    formRef: React.RefObject<FormInstance>\n}\ninterface IState {\n    currentWearID: string\n}\n\n@inject('currentDropStore')\n@observer\nexport default class FormBody extends React.Component<IProps> {\n    onFill = () => {\n        this.props.formRef.current!.setFieldsValue({\n            article: 'test data',\n            quantityIssued: 2,\n            materials: 'test data',\n            designer: 'test data',\n            price: 1000,\n            description: 'test data',\n            picture: 'test data',\n        });\n    };\n\n    onSubmit = (wear: IWearable) => {\n        this.props.currentDropStore?.addWear(wear)\n        this.props.formRef.current!.resetFields()\n    }\n\n    render() {\n        return (\n            <Root>\n                <Form {...layout} ref={this.props.formRef} name=\"control-ref\"\n                    onFinish={values => this.onSubmit({ ...values, id: this.props.currentDropStore?.currentWearId } as IWearable)}>\n                    <Form.Item name=\"article\" label=\"Article\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item name=\"quantityIssued\" label=\"Quantity issued\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item name=\"materials\" label=\"Materials\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item name=\"designer\" label=\"Designer\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item name=\"price\" label=\"Release price\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item name=\"description\" label=\"Description\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n                    <Form.Item name=\"picture\" label=\"Picture\" rules={[{ required: true }]}>\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item {...tailLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                        <Button type=\"link\" htmlType=\"button\" onClick={this.onFill}>\n                            Fill form\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Root>\n        );\n    }\n}\n\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { Table, Space } from 'antd'\nimport { CurrentDropStore, IWearable } from '../../stores/CurrentDropStore'\nimport { inject, observer } from 'mobx-react'\nimport { DataStore } from '../../stores/DataStore'\nimport { FormInstance } from 'antd/lib/form'\n\ninterface IProps {\n    currentDropStore?: CurrentDropStore\n    dataStore?: DataStore\n    formRef: React.RefObject<FormInstance>\n}\n\n@inject('currentDropStore', 'dataStore')\n@observer\nexport default class TableCurrentDrop extends React.Component<IProps> {\n    render() {\n        let dataSource: IWearable[] = []\n        if (this.props.currentDropStore?.currentDrop) {\n            dataSource = this.props.currentDropStore?.currentDrop\n                .reduce((acc: IWearable[], wear: IWearable, index: number) => ([...acc, { ...wear, key: index }]), [])\n        }\n\n        const columns = [\n            {\n                title: 'id',\n                dataIndex: 'id',\n                key: 'id',\n            },\n            {\n                title: 'Article',\n                dataIndex: 'article',\n                key: 'article',\n            },\n            {\n                title: 'Quantity issued',\n                dataIndex: 'quantityIssued',\n                key: 'quantityIssued',\n            },\n            {\n                title: 'Materials',\n                dataIndex: 'materials',\n                key: 'materials',\n            },\n            {\n                title: 'Designer',\n                dataIndex: 'designer',\n                key: 'designer',\n            },\n            {\n                title: 'Release price',\n                dataIndex: 'price',\n                key: 'price',\n            },\n            {\n                title: 'Description',\n                dataIndex: 'description',\n                key: 'description',\n            },\n            {\n                title: 'Picture',\n                dataIndex: 'picture',\n                key: 'picture',\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text: string, record: IWearable) => (\n                    <Space size=\"middle\">\n                        <a onClick={() => this.props.currentDropStore?.deleteWear(record.id)}>\n                            Delete\n                        </a>\n                        <a onClick={() => {\n                            this.props.formRef.current!.setFieldsValue(\n                                this.props.currentDropStore?.currentDrop!.find(item => item.id === record.id)!\n                            )\n                            this.props.currentDropStore?.setCurrentWearId(record.id)\n                        }}>\n                            Change\n                        </a>\n                    </Space>\n                ),\n            },\n        ];\n        return <Root>\n            <Table dataSource={dataSource} columns={columns} />\n            <ButtonPush onClick={() => {\n                this.props.dataStore?.\n                    addDrop(this.props.currentDropStore?.currentDrop!.\n                        reduce((acc, value) => ({ ...acc, [value.id]: value }), {}))\n                this.props.currentDropStore?.clear()\n            }}>\n                Push Drop\n            </ButtonPush>\n        </Root>\n    }\n}\n\nconst Root = styled.div``\n\nconst ButtonPush = styled.span`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nwidth: auto;\nbackground: #1890FF;\nborder: none;\ncolor: white;\npadding: 7px 15px;\nborder-radius: 2px;\ncursor: pointer;\n`\n\n","/**jsx*/\nimport React from 'react';\nimport styled from '@emotion/styled'\nimport { css, jsx } from '@emotion/core'\nimport FormBody from \"./FormBody\";\nimport TableCurrentDrop from \"./TableCurrentDrop\"\nimport { inject, observer } from 'mobx-react';\nimport { SwitchScreenStore } from '../../stores'\nimport { FormInstance } from 'antd/lib/form';\n\ninterface IProps {\n    switchScreenStore?: SwitchScreenStore\n}\n\n@inject('switchScreenStore')\n@observer\nexport default class CurrentDrop extends React.Component<IProps> {\n    formRef = React.createRef<FormInstance>();\n\n    \n    handleSubmit = (values: any) => {\n        console.log(values);\n    }\n\n    render() {\n        let classHidden = ''\n        if (this.props.switchScreenStore!.openScreen !== 'CurrentDrop') {\n            classHidden = 'hidden'\n        }\n\n        return <Root>\n            <Wrapper className={classHidden}>\n                {console.log(this.props.switchScreenStore!.openScreen)}\n                <TableCurrentDrop formRef={this.formRef} css={css`flex: 1;`} />\n                <FormBody formRef={this.formRef} css={css`flex: 1;`} />\n            </Wrapper>\n        </Root>\n    }\n\n}\n\n\nconst Root = styled.div`\nwidth: 100%;\nmargin-top: 80px;\nmargin-left: 100px;\n.hidden {\n    display: none;\n}\n`\n\nconst Wrapper = styled.div`\ndisplay: flex;\nflex-direction: row;\nalign-items: flex-start;\njustify-content: flex-start;\n`\n","/**jsx*/\nimport React from 'react'\nimport styled from '@emotion/styled'\nimport { css, jsx } from '@emotion/core'\nimport { inject, observer } from 'mobx-react';\nimport { SwitchScreenStore } from '../../stores'\nimport { DataStore } from '../../stores'\nimport { Table } from 'antd'\nimport ReactLoaderSpinner from 'react-loader-spinner'\n\ninterface IProps {\n    switchScreenStore?: SwitchScreenStore\n    dataStore?: DataStore\n}\n\n@inject('switchScreenStore', 'dataStore')\n@observer\nexport default class DropsBase extends React.Component<IProps> {\n    render() {\n        const { drops } = this.props.dataStore!;\n        let classHidden = ''\n        if (this.props.switchScreenStore!.openScreen !== 'Drops') {\n            classHidden = 'hidden'\n        }\n\n        const data: Array<any> = Object.entries(drops)\n            .map(([id, value]) => ({ key: id, id, numberOfThings: Object.keys(value).length }))\n\n        return data.length\n            ? <Root>\n                <Wrapper className={classHidden}>\n                    <Table\n                        columns={columns}\n                        expandable={{\n                            expandedRowRender: record => <Table\n                                columns={dropInfoColumns}\n                                dataSource={Object.entries(drops[record.id] || {}).map(([id, v]) => ({ ...v, id, key: id }))}\n                            />,\n                            rowExpandable: record => !record.dropInfo,\n                        }}\n                        dataSource={data}\n                    />\n                </Wrapper>\n            </Root>\n            : <Loader />\n    }\n}\n\nconst Loader = () => <div css={css` margin: 17% auto; `}>\n    <ReactLoaderSpinner type=\"TailSpin\" color=\"#00BFFF\" height={100} width={100} />\n</div>\n\nconst Root = styled.div`\nwidth: 100%;\nmargin-top: 50px;\nmargin-left: 100px;\n.hidden {\n    display: none;\n}\n`\n\nconst Wrapper = styled.div`\ndisplay: flex;\nflex-direction: row;\nalign-items: flex-start;\njustify-content: flex-start;\n`\n\n\nconst columns = [\n    { title: 'ID', dataIndex: 'id', key: 'id' },\n    { title: 'Number of things', dataIndex: 'numberOfThings', key: 'numberOfThings' },\n];\nconst dropInfoColumns = [\n    { title: 'ID', dataIndex: 'id', key: 'id', },\n    { title: 'Article', dataIndex: 'article', key: 'article', },\n    { title: 'Quantity issued', dataIndex: 'quantityIssued', key: 'quantityIssued', },\n    { title: 'Materials', dataIndex: 'materials', key: 'materials', },\n    { title: 'Designer', dataIndex: 'designer', key: 'designer', },\n    { title: 'Release price', dataIndex: 'releasePrice', key: 'releasePrice', },\n    { title: 'Description', dataIndex: 'description', key: 'description', },\n    { title: 'Picture', dataIndex: 'picture', key: 'picture' },\n];\n","/**jsx*/\nimport React from 'react';\nimport styled from '@emotion/styled'\nimport { inject, observer } from 'mobx-react'\nimport { css, jsx } from '@emotion/core'\nimport { SwitchScreenStore } from '../../stores'\n\ninterface IProps {\n    switchScreenStore?: SwitchScreenStore\n}\n\n@inject('switchScreenStore')\n@observer\nexport default class SwitchScreen extends React.Component<IProps> {\n    handleSwitch = (typeOfScreen: string) => {\n        this.props.switchScreenStore!.setScreen(typeOfScreen)\n    }\n    render() {\n        let classSwitch = ''\n        if (this.props.switchScreenStore!.openScreen === 'Drops') { classSwitch = 'drops' }\n        else { classSwitch = 'currentDrop' }\n\n        return <Root>\n            <Wrapper className={classSwitch}>\n                <Drops onClick={() => this.handleSwitch('Drops')}>Drops Base</Drops>\n                <PushDrop onClick={() => this.handleSwitch('CurrentDrop')}>Current Drop</PushDrop>\n            </Wrapper>\n        </Root>\n    }\n}\n\nconst Root = styled.div`\nposition: absolute;\ntop: 20px;\nleft: 50px;\ndisplay: flex;\n.drops{\n    >div:first-child{\n        background: #1890FF;\n        border: none;\n        color: white;\n    }\n}\n.currentDrop{\n    >div:last-child{\n        background: #1890FF;\n        border: none;\n        color: white;\n    }\n}\n`\nconst Wrapper = styled.div`\ndisplay: flex;\n`\nconst Drops = styled.div`\npadding: 7px 15px;\nborder: 1px solid #807F80;\nbox-sizing: border-box;\nborder-radius: 2px;\ncursor: pointer;\ntransition: all 0.3s;\n`\nconst PushDrop = styled.div`\nmargin-left: 20px;\npadding: 7px 15px;\nborder: 1px solid #807F80;\nbox-sizing: border-box;\nborder-radius: 2px;\ncursor: pointer;\ntransition: all 0.3s;\n`","import React from 'react';\nimport styled from '@emotion/styled'\nimport {Button, List, Modal} from \"antd\";\nimport CurrentDrop from \"../CurrentDrop\";\nimport DropsBase from \"../DropsBase\";\nimport SizedBox from \"../SizedBox\";\nimport SwitchScreen from '../SwitchScreen'\n\ninterface IProps {\n\n}\n\ninterface IState {\n    visible: boolean\n}\n\nclass App extends React.Component<IProps, IState> {\n    state = {visible: false};\n\n    render() {\n        return <Root>\n            <SwitchScreen/>\n            <CurrentDrop/>\n            <DropsBase/>\n        </Root>\n    }\n\n}\n\n\nconst Root = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nheight: 100vh;\nwidth: 100vw;\n`\n\n\nexport default App;\n","import { RootStore } from './index';\n\nclass SubStore {\n    constructor(public rootStore: RootStore) {}\n}\n\nexport {\n    SubStore\n};\n","import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\nfirebase.initializeApp(config);\n\nconst database = firebase.database();\n\nexport {\n    database, firebase as default,\n}","import { RootStore } from \"./index\";\nimport { SubStore } from \"./SubStore\";\nimport { database } from \"../utils/firebase\";\nimport { action, observable } from \"mobx\";\n\ntype IWearable = {\n  id: string;\n  article: string;\n  quantityIssued: number;\n  materials: string;\n  designer: string;\n  price: number;\n  description: string;\n  picture: string;\n};\n\nexport class DataStore extends SubStore {\n  @observable drops: Record<string, Record<string, IWearable>> = {};\n\n  constructor(rootStore: RootStore, initState: any) {\n    super(rootStore);\n    this.syncGoods();\n  }\n\n  @action syncGoods = async () => {\n    database\n      .ref(\"/\")\n      .once(\"value\")\n      .then((snapshot) => {\n        const drops = snapshot.val();\n        this.drops = drops || {};\n      });\n  };\n\n  addDrop = async (drop: Record<string, IWearable>) =>\n    new Promise(async (resolve) => {\n      database.ref(\"/\").push(drop, (error) => resolve(error));\n      await this.syncGoods();\n    });\n\n  updateItem = async (id: string, drop: IWearable) =>\n    new Promise(async (resolve) => {\n      database.ref(`/${id}`).update(drop, (error) => resolve(error));\n      await this.syncGoods();\n    });\n\n  removeItem = async (id: string) =>\n    new Promise(async (resolve) => {\n      database.ref(`/${id}`).remove((error) => resolve(error));\n      await this.syncGoods();\n    });\n}\n","import { SubStore } from \"./SubStore\";\nimport { action, observable, autorun } from \"mobx\";\n\nexport interface IWearable {\n  id: string;\n  key?: number;\n  article: string;\n  quantityIssued: number;\n  materials: string;\n  designer: string;\n  price: number;\n  description: string;\n  picture: string;\n}\n\nexport class CurrentDropStore extends SubStore {\n  @observable currentDrop: IWearable[] =\n    JSON.parse(localStorage.getItem(\"currentDrop\")!) || [];\n\n  @observable currentWearId: string = ''\n  @action setCurrentWearId = (id: string) => this.currentWearId = id\n\n  autoUpdate = autorun(() => {\n    localStorage.setItem(\"currentDrop\", JSON.stringify(this.currentDrop));\n  });\n\n  @action addWear = (wear: IWearable) => {\n    wear.id = this.currentWearId || Math.ceil(10000 * Math.random()).toString()\n\n    if (this.currentDrop.filter((item) => item.id === wear.id).length === 0) {\n      this.currentDrop.push(wear);\n    } else {\n      this.currentDrop[this.currentDrop.findIndex((item) => item.id === wear.id)] = {...this.currentDrop.find((item) => item.id === wear.id)!, ...wear}\n    }\n  };\n\n  @action deleteWear = (id: string) => {\n    const index = this.currentDrop.findIndex((item) => item.id === id);\n    this.currentDrop.splice(index, 1);\n  };\n\n  @action clear = () => {\n    this.currentDrop = [];\n    localStorage.setItem(\"currentDrop\", \"\");\n  };\n}\n","import {observable, action} from 'mobx'\nimport { SubStore } from './SubStore';\n\n\nexport class SwitchScreenStore extends SubStore {\n    @observable openScreen = 'Drops'\n\n    @action setScreen = (typeOfScreen: string) => {\n        this.openScreen = typeOfScreen\n        console.log(typeOfScreen)\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { autorun } from 'mobx';\nimport { RootStore } from './stores';\nimport { loadState, saveState } from './utils/localStore';\nimport { Provider } from 'mobx-react';\nimport 'antd/dist/antd.css';\n\nconst initState = loadState();\nconst mobXStore = new RootStore(initState);\n\nautorun(() => {\n  console.dir(mobXStore);\n  saveState(mobXStore.serialize());\n}, { delay: 1000 });\n\nReactDOM.render(<Provider {...mobXStore}>\n  <App />\n</Provider>, document.getElementById('root'));\n","import { DataStore, CurrentDropStore, SwitchScreenStore } from \"./index\";\n\nclass RootStore {\n  public dataStore: DataStore;\n  public currentDropStore: CurrentDropStore;\n  public switchScreenStore: SwitchScreenStore;\n\n  constructor(initState: any) {\n    this.dataStore = new DataStore(\n      this,\n      initState && initState.dataStore ? initState.dataStore : null\n    );\n    this.currentDropStore = new CurrentDropStore(this);\n    this.switchScreenStore = new SwitchScreenStore(this);\n  }\n\n  public serialize = () => ({\n    dataStore: {},\n  });\n}\n\nexport { RootStore };\n","\nexport const loadState = (): any | undefined => {\n    try {\n        const state = JSON.parse(localStorage.getItem('store') as string);\n        return state || undefined;\n\n    } catch (error) {\n        console.log(error);\n        return undefined;\n    }\n\n};\nexport const saveState = (state: any): void => {\n    localStorage.setItem('store', JSON.stringify(state));\n};\n"],"sourceRoot":""}